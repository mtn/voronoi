Algorithm:
    - New arcs only introduced on the beach line by point events, which are known in advance
    - Vertex events generated dynamically as algorithm runs when a parabola on beachline converges
        - Check each consecutive three arcs on the beachline.
            1) Compute the circumcircle
            2) Check if the 4th endpoint lies below the sweep line
            3) If it is, create a vertex event with y coordinate equal to that of the 4th point


    Point Events: Some new point p_i is encountered on L
        In o(logn), find out which arc currently defines the beachline at that location

    Circle Events:
        parabolic arc shrinks to a point, disappearing from parabolic front.

    Termination condition: once all points are behind sweepline, diagram is surrounded by a box

    Pseudocode:
    VORONOI_DIAGRAM(P)
        Input: A set P of point sites in the plane
        Output: The Voronoi diagram Vor(P) given inside a bounding box in a doubly-connected edge list structure
        {
        Initialize the event tree Q with all point events
        while Q is not empty do
        {
        Consider the event with largest y-coordinate in Q
        if the event is a point event, occurring at site pi
        then HANDLE_POINT_EVENT(pi)
        else HANDLE_CIRCLE_EVENT()
        Remove the event from Q
        }
        Put Voronoi diagram into a box
        }

    Binary tree of parabolas: parabolas have
            1) focus
            2) associated site
            3) a parent (for traversing horizontally, private)
    Some sort of priority queue for events
        priority comparison based on y. if y is equal, by x

    The bisector of neighboring sights is the intersection of their parabolas


    2 data structures: event queue and sweep table
        queue: "event queue contains a sequence of lexicographically ordered points or events which define where the sweep must momentarily stop. This queue is updated as the sweep proceeds."
        sweep table: "The sweep table maintains a cross-section of how the sweepline intersects the regions and edges of the Voronoi diagram. This table is updated at each event."


http://old.cescg.org/CESCG99/RCuk/algorithm.html
http://www.cs.sfu.ca/~binay/813.2011/Fortune.pdf
